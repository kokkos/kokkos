set(KOKKOS_INSTALL_PREFIX @KOKKOS_INSTALL_PREFIX@)
set(KOKKOS_LINK_LIBS -lkokkos @KOKKOS_EXTRA_LIBS_LIST@)
set(KOKKOS_COMPILE_OPTIONS @KOKKOS_CXXFLAGS@)
set(KOKKOS_LINK_OPTIONS @KOKKOS_LINK_FLAGS@)
set(KOKKOS_DEVICES @KOKKOS_DEVICES@)
set(KOKKOS_ARCH @KOKKOS_ARCH@)
set(KOKKOS_CXX_STANDARD @KOKKOS_CXX_STANDARD@)

# Replace comma separators with semicolons
foreach(_var KOKKOS_DEVICES KOKKOS_ARCH)
  string(REPLACE "," ";" ${_var} "${${_var}}")
  if(Kokkos_DEBUG)
    message("${_var} = \"${${_var}}\"")
  endif()
endforeach()

# Find out what C++ standard to use
if(KOKKOS_CXX_STANDARD STREQUAL c++11)
  set(KOKKOS_COMPILE_FEATURES cxx_std_11)
elseif(KOKKOS_CXX_STANDARD STREQUAL c++14)
  set(KOKKOS_COMPILE_FEATURES cxx_std_14)
elseif(KOKKOS_CXX_STANDARD STREQUAL c++17)
  set(KOKKOS_COMPILE_FEATURES cxx_std_17)
else()
  message(WARNING "kokkos cxx standard not supported")
endif()

# Remove flag that set the C++ standard from the compile options
set(_COMPILE_OPTIONS)
foreach(_opt ${KOKKOS_COMPILE_OPTIONS})
  if(_opt MATCHES "c\\+\\+")
    if(Kokkos_DEBUG)
      message("Removing \"${_opt}\" flag from kokkos compile options")
    endif()
  else()
    list(APPEND _COMPILE_OPTIONS ${_opt})
  endif()
endforeach()
set(KOKKOS_COMPILE_OPTIONS ${_COMPILE_OPTIONS})
unset(_COMPILE_OPTIONS)

# Find the headers and library
find_path(KOKKOS_INCLUDE_DIR Kokkos_Core.hpp PATHS ${KOKKOS_INSTALL_PREFIX}/include NO_DEFAULT_PATH)
find_library(KOKKOS_LIBRARY NAMES kokkos PATHS ${KOKKOS_INSTALL_PREFIX}/lib NO_DEFAULT_PATH)
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(KOKKOS DEFAULT_MSG KOKKOS_INCLUDE_DIR KOKKOS_LIBRARY)
get_filename_component(KOKKOS_LIBRARY_DIR ${KOKKOS_LIBRARY} DIRECTORY)

# Setup the target
add_library(Kokkos::kokkos INTERFACE IMPORTED)
set_target_properties(Kokkos::kokkos PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${KOKKOS_INCLUDE_DIR}"
  INTERFACE_LINK_LIBRARIES "${KOKKOS_LINK_LIBS}"
  INTERFACE_LINK_DIRECTORIES "${KOKKOS_LIBRARY_DIR}"
  INTERFACE_COMPILE_OPTIONS "${KOKKOS_COMPILE_OPTIONS}"
  INTERFACE_LINK_OPTIONS "${KOKKOS_LINK_OPTIONS}"
  INTERFACE_COMPILE_FEATURES "${KOKKOS_COMPILE_FEATURES}"
)

#   This function makes sure that kokkos was built with the requested backends
#   and target architectures and generates a fatal error if it was not.
#
#   kokkos_check_requested(
#     [DEVICES <devices>...] # Set of backends (e.g. "OpenMP" and/or "Cuda")
#     [ARCH <archs>...]      # Target architectures (e.g. "Power9" and/or "Volta70")
#   )
function(kokkos_check_requested)
  cmake_parse_arguments(_KOKKOS_REQUESTED "" "" "DEVICES;ARCH" ${ARGN})
  set(_KOKKOS_REQUESTED_ARGS)
  foreach(_X DEVICES ARCH)
    if(_KOKKOS_REQUESTED_${_X})
      list(APPEND _KOKKOS_REQUESTED_ARGS ${_X})
    endif()
  endforeach()
  set(_KOKKOS_CHECK_REQUESTED_SUCCESS TRUE)
  foreach(_X ${_KOKKOS_REQUESTED_ARGS})
    foreach(_requested ${_KOKKOS_REQUESTED_${_X}})
      foreach(_provided ${KOKKOS_${_X}})
        if(_requested STREQUAL _provided)
          string(REPLACE ";" " " ${_requested} "${_KOKKOS_REQUESTED_${_X}}")
        endif()
      endforeach()
    endforeach()
    find_package_handle_standard_args("KOKKOS_${_X}" DEFAULT_MSG ${_KOKKOS_REQUESTED_${_X}})
    if(NOT KOKKOS_${_X}_FOUND)
      set(_KOKKOS_CHECK_REQUESTED_SUCCESS FALSE)
    endif()
  endforeach()
  if(NOT _KOKKOS_CHECK_REQUESTED_SUCCESS)
    message(FATAL_ERROR "Kokkos does NOT provide all backends and/or architectures requested")
  endif()
endfunction()
