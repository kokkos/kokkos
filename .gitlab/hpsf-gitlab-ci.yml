NVIDIA-GH200:
  stage: test
  tags: [nvidia-gh200]
  image: masterleinad/kokkos-nvcc:12.6.1
  script:
    - apt-get update && apt-get install -y git
    - export CMAKE_BUILD_PARALLEL_LEVEL=48
    - export ENV_CMAKE_OPTIONS=""
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_COMPILER=`pwd`/bin/nvcc_wrapper"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_FLAGS='-Werror=all-warnings -Werror'"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ARCH_HOPPER90=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_CUDA=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_COMPILER_WARNINGS=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_IMPL_CUDA_UNIFIED_MEMORY=ON;"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_TESTS=ON"
    - git rev-parse --abbrev-ref HEAD 
    - export GITHUB_PR_ID=$(git rev-parse --abbrev-ref HEAD | cut -d \_ -f 1 | cut -c 3-)
    - ctest -VV
        -D CDASH_MODEL=Experimental
        -D GITHUB_PR_ID=${GITHUB_PR_ID}
        -D CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS}"
        -D OUTPUT_JUNIT_FILE=result_gh200.xml
        -S CTestRun.cmake
        -D CTEST_SITE="gitlab.spack.io"
        -D CTEST_BUILD_NAME="NVIDIA-GH200"
  artifacts:
    when: always
    paths:
      - build/result_gh200.xml
    reports:
      junit: build/result_gh200.xml

INTEL-DATA-CENTER-MAX-1100:
  stage: test
  tags: [intel-data-center-max-1100]
  image: intel/oneapi-basekit:2024.2.1-0-devel-ubuntu22.04
  script:
    - apt-get update && apt-get install -y git
    - sycl-ls
    - export ONEAPI_DEVICE_SELECTOR=level_zero:gpu
    - export CLANG_TIDY_EXE=$(dirname $(which icpx))/compiler/clang-tidy
    - export CMAKE_BUILD_PARALLEL_LEVEL=48
    - export ENV_CMAKE_OPTIONS=""
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_BUILD_TYPE=Release"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_CLANG_TIDY='${CLANG_TIDY_EXE}\;-warnings-as-errors=*'"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_COMPILER=icpx"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_SYCL=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ARCH_INTEL_PVC=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_TESTS=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_FLAGS='-Werror -fsycl-device-code-split=per_kernel -fp-model=precise'"
    - git rev-parse --abbrev-ref HEAD
    - export GITHUB_PR_ID=$(git rev-parse --abbrev-ref HEAD | cut -d \_ -f 1 | cut -c 3-)
    - ctest -VV
        -D CDASH_MODEL=Experimental
        -D GITHUB_PR_ID=${GITHUB_PR_ID}
        -D CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS}"
        -D OUTPUT_JUNIT_FILE=result_pvc1100.xml
        -S CTestRun.cmake
        -D CTEST_SITE="gitlab.spack.io"
        -D CTEST_BUILD_NAME="INTEL-DATA-CENTER-MAX-1100"
  artifacts:
    when: always
    paths:
      - build/result_pvc1100.xml
    reports:
      junit: build/result_pvc1100.xml

AMD-MI300A:
  stage: test
  tags: [uo-gpu, odyssey, amd-mi300]
  image: rocm/dev-ubuntu-24.04:6.2.4-complete
  script:
    - apt-get update && apt-get install -y cmake git
    - export CMAKE_BUILD_PARALLEL_LEVEL=48
    - export GTEST_FILTER=-hip.unified_memory_zero_memset
    - export ENV_CMAKE_OPTIONS=""
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_BUILD_TYPE=Release"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_COMPILER=hipcc"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_HIP=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ARCH_AMD_GFX942_APU=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ARCH_ZEN4=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D rocthrust_ROOT=/opt/rocm-6.2.4"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_TESTS=ON"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D CMAKE_CXX_FLAGS='-Werror'"
    - export ENV_CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS};-D Kokkos_ENABLE_COMPILER_WARNINGS=ON"
    - git rev-parse --abbrev-ref HEAD
    - export GITHUB_PR_ID=$(git rev-parse --abbrev-ref HEAD | cut -d \_ -f 1 | cut -c 3-)
    - ctest -VV
      -D CDASH_MODEL=Experimental
      -D GITHUB_PR_ID=${GITHUB_PR_ID}
      -D CMAKE_OPTIONS="${ENV_CMAKE_OPTIONS}"
      -D OUTPUT_JUNIT_FILE=result_mi300a.xml
      -S CTestRun.cmake
      -D CTEST_SITE="gitlab.spack.io"
      -D CTEST_BUILD_NAME="AMD-MI300A"
  artifacts:
    when: always
    paths:
      - build/result_mi300a.xml
    reports:
      junit: build/result_mi300a.xml
