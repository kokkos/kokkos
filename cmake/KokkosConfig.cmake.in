# Compute paths
@PACKAGE_INIT@

GET_FILENAME_COMPONENT(Kokkos_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
SET(Kokkos_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")

INCLUDE("${Kokkos_CMAKE_DIR}/KokkosTargets.cmake")

# These are IMPORTED targets created by KokkosTargets.cmake
SET(Kokkos_LIBRARY_DIRS    @INSTALL_LIB_DIR@)
SET(Kokkos_SEPARATE_LIBS   @KOKKOS_SEPARATE_LIBS@)
SET(Kokkos_LIBRARIES       @KOKKOS_EXT_LIBRARIES@)

SET(Kokkos_DEVICES                      @KOKKOS_ENABLED_DEVICES@)
SET(Kokkos_OPTIONS                      @KOKKOS_ENABLED_OPTIONS@)
SET(Kokkos_ARCH                         @KOKKOS_ENABLED_ARCH_LIST@)

# These are needed by KokkosKernels
FOREACH(DEV ${Kokkos_DEVICES})
SET(Kokkos_ENABLE_${DEV} ON)
ENDFOREACH()

include(FindPackageHandleStandardArgs)

FUNCTION(TARGET_LINK_KOKKOS TARGET)
  CMAKE_PARSE_ARGUMENTS(
    PARSE
    "PRIVATE;PUBLIC;INTERFACE"
    ""
    ""
    ${ARGN}
  )

  SET(LINK_TYPE)
  IF (PARSE_PRIVATE)
    SET(LINK_TYPE PRIVATE)
  ELSEIF(PARSE_PUBLIC)
    SET(LINK_TYPE PUBLIC)
  ELSEIF(PARSE_INTERFACE)
    SET(LINK_TYPE INTERFACE)
  ENDIF()

  FOREACH(LIB ${Kokkos_LIBRARIES})
    TARGET_LINK_LIBRARIES(${TARGET} ${LINK_TYPE} ${LIB})
  ENDFOREACH()
ENDFUNCTION()

#   This function makes sure that Kokkos was built with the requested backends
#   and target architectures and generates a fatal error if it was not.
#
#   kokkos_check(
#     [DEVICES <devices>...] # Set of backends (e.g. "OpenMP" and/or "Cuda")
#     [ARCH <archs>...]      # Target architectures (e.g. "Power9" and/or "Volta70")
#     [OPTIONS <options>...] # Optional settings (e.g. "PROFILING")
#     [TPLS <tpls>...]       # Third party libraries
#   )
function(kokkos_check)
  set(ALLOWED_ARGS DEVICES ARCH OPTIONS TPLS)
  cmake_parse_arguments(KOKKOS_CHECK "" "" "${ALLOWED_ARGS}" ${ARGN})
  # Get the list of keywords that were actually passed to the function.
  set(REQUESTED_ARGS)
  foreach(arg ${ALLOWED_ARGS})
    if(KOKKOS_CHECK_${arg})
      list(APPEND REQUESTED_ARGS ${arg})
    endif()
  endforeach()
  set(KOKKOS_CHECK_SUCCESS TRUE)
  foreach(arg ${REQUESTED_ARGS})
    # Define variables named after the required arguments that are provided by
    # the Kokkos install.
    foreach(requested ${KOKKOS_CHECK_${arg}})
      foreach(provided ${Kokkos_${arg}})
        STRING(TOUPPER ${requested} REQUESTED_UC)
        STRING(TOUPPER ${provided}  PROVIDED_UC)
        if(PROVIDED_UC STREQUAL REQUESTED_UC)
          string(REPLACE ";" " " ${requested} "${KOKKOS_CHECK_${arg}}")
        endif()
      endforeach()
    endforeach()
    # Somewhat divert the CMake function below from its original purpose and
    # use it to check that there are variables defined for all required
    # arguments. Success or failure messages will be displayed but we are
    # responsible for signaling failure and skip the build system generation.
    find_package_handle_standard_args("Kokkos_${arg}" DEFAULT_MSG
            ${KOKKOS_CHECK_${arg}})
    if(NOT Kokkos_${arg}_FOUND)
      set(KOKKOS_CHECK_SUCCESS FALSE)
    endif()
  endforeach()
  if(NOT KOKKOS_CHECK_SUCCESS)
    message(FATAL_ERROR "Kokkos does NOT provide all backends and/or architectures requested")
  endif()
endfunction()

#Find dependencies
INCLUDE(CMakeFindDependencyMacro)
SET(FOUND_HPX_DIR @HPX_DIR@)
SET(FOUND_HPX_ROOT @HPX_ROOT@)
#figure out if we found HPX using root or dir
#set the search path accordingly, unless it got overriden
IF (NOT DEFINED HPX_ROOT AND NOT DEFINED HPX_DIR)
  IF (FOUND_HPX_DIR)
    SET(HPX_DIR ${FOUND_HPX_DIR})
  ELSEIF(FOUND_HPX_ROOT)
    SET(HPX_ROOT ${FOUND_HPX_ROOT})
  ENDIF()
ENDIF()

SET(KOKKOS_USE_CXX_EXTENSIONS @KOKKOS_USE_CXX_EXTENSIONS@)
IF (NOT DEFINED CMAKE_CXX_EXTENSIONS OR CMAKE_CXX_EXTENSIONS)
  IF (NOT KOKKOS_USE_CXX_EXTENSIONS)
    MESSAGE(WARNING "The installed Kokkos configuration does not support CXX extensions. Forcing -DCMAKE_CXX_EXTENSIONS=Off")
    SET(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "" FORCE)
  ENDIF()
ENDIF()

SET(KOKKOS_ENABLE_HPX @KOKKOS_ENABLE_HPX@)
IF (KOKKOS_ENABLE_HPX)
  FIND_DEPENDENCY(HPX)
ENDIF()

SET(HWLOC_LIBRARIES @HWLOC_LIBRARIES@)
SET(KOKKOS_ENABLE_HWLOC @KOKKOS_ENABLE_HWLOC@)
IF(KOKKOS_ENABLE_HWLOC)
  ADD_LIBRARY(Kokkos::hwloc UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::hwloc PROPERTIES
    IMPORTED_LOCATION "${HWLOC_LIBRARIES}"
  )
ENDIF()

SET(MEMKIND_LIBRARIES @MEMKIND_LIBRARIES@)
SET(MEMKIND_INCLUDE_DIR @MEMKIND_INCLUDE_DIR@)
SET(KOKKOS_ENABLE_MEMKIND @KOKKOS_ENABLE_MEMKIND@)
IF(KOKKOS_ENABLE_MEMKIND)
  ADD_LIBRARY(Kokkos::memkind UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::memkind PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${MEMKIND_INCLUDE_DIR}"
    IMPORTED_LOCATION "${MEMKIND_LIBRARIES}"
  )
ENDIF()

SET(LIBDL_LIBRARIES   @LIBDL_LIBRARIES@)
SET(LIBDL_INCLUDE_DIR @LIBDL_INCLUDE_DIR@)
#no if, always need -ldl
ADD_LIBRARY(Kokkos::libdl UNKNOWN IMPORTED)
SET_TARGET_PROPERTIES(Kokkos::libdl PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${LIBDL_INCLUDE_DIR}"
  IMPORTED_LOCATION "${LIBDL_LIBRARIES}"
)

SET(LIBRT_LIBRARIES @LIBRT_LIBRARIES@)
SET(KOKKOS_ENABLE_LIBRT @KOKKOS_ENABLE_LIBRT@)
IF(KOKKOS_ENABLE_LIBRT)
  ADD_LIBRARY(Kokkos::librt UNKNOWN IMPORTED)
  SET_TARGET_PROPERTIES(Kokkos::librt PROPERTIES
    IMPORTED_LOCATION "${LIBRT_LIBRARIES}"
  )
ENDIF()
