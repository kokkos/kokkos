ARG BASE=nvidia/cuda:10.2-devel
FROM $BASE

RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub

RUN apt-get update && apt-get install -y \
        bc \
        wget \
        ccache \
        ninja-build \
        python3 \
        git \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# unbuntu18.04-based images have libstdc++ that is lacking filesystem support
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    apt-get update && \
    apt-get install -y g++-9 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN KEYDUMP_URL=https://cloud.cees.ornl.gov/download && \
    KEYDUMP_FILE=keydump && \
    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE} && \
    wget --quiet ${KEYDUMP_URL}/${KEYDUMP_FILE}.sig && \
    gpg --import ${KEYDUMP_FILE} && \
    gpg --verify ${KEYDUMP_FILE}.sig ${KEYDUMP_FILE} && \
    rm ${KEYDUMP_FILE}*

ARG CMAKE_VERSION=3.23.2
ENV CMAKE_DIR=/opt/cmake
RUN CMAKE_URL=https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION} && \
    CMAKE_SCRIPT=cmake-${CMAKE_VERSION}-Linux-x86_64.sh && \
    CMAKE_SHA256=cmake-${CMAKE_VERSION}-SHA-256.txt && \
    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256} && \
    wget --quiet ${CMAKE_URL}/${CMAKE_SHA256}.asc && \
    wget --quiet ${CMAKE_URL}/${CMAKE_SCRIPT} && \
    gpg --verify ${CMAKE_SHA256}.asc ${CMAKE_SHA256} && \
    grep -i ${CMAKE_SCRIPT} ${CMAKE_SHA256} | sed -e s/linux/Linux/ | sha256sum --check && \
    mkdir -p ${CMAKE_DIR} && \
    sh ${CMAKE_SCRIPT} --skip-license --prefix=${CMAKE_DIR} && \
    rm cmake*
ENV PATH=${CMAKE_DIR}/bin:$PATH

ENV SYCL_DIR=/opt/sycl
RUN SYCL_VERSION=20221201 && \
    SYCL_URL=https://github.com/intel/llvm/archive/sycl-nightly && \
    SYCL_ARCHIVE=${SYCL_VERSION}.tar.gz && \
    SCRATCH_DIR=/scratch && mkdir -p ${SCRATCH_DIR} && cd ${SCRATCH_DIR} && \
    wget --quiet ${SYCL_URL}/${SYCL_ARCHIVE} && \
    mkdir llvm && \
    tar -xf ${SYCL_ARCHIVE} -C llvm --strip-components=1 && \
    cd llvm && \
    mkdir build && \
    cd build && \
    cmake -G Ninja \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_ASSERTIONS=ON \
      -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" \
      -DLLVM_EXTERNAL_PROJECTS="sycl;llvm-spirv;opencl;xpti;xptifw;libdevice" \
      -DLLVM_EXTERNAL_SYCL_SOURCE_DIR=/scratch/llvm/sycl \
      -DLLVM_EXTERNAL_LLVM_SPIRV_SOURCE_DIR=/scratch/llvm/llvm-spirv \
      -DLLVM_EXTERNAL_XPTI_SOURCE_DIR=/scratch/llvm/xpti \
      -DXPTI_SOURCE_DIR=/scratch/llvm/xpti \
      -DLLVM_EXTERNAL_XPTIFW_SOURCE_DIR=/scratch/llvm/xptifw \
      -DLLVM_EXTERNAL_LIBDEVICE_SOURCE_DIR=/scratch/llvm/libdevice \
      -DLLVM_ENABLE_PROJECTS="clang;sycl;llvm-spirv;opencl;xpti;xptifw;libdevice;libclc" \
      -DLIBCLC_TARGETS_TO_BUILD=";nvptx64--;nvptx64--nvidiacl" \
      -DLIBCLC_GENERATE_REMANGLED_VARIANTS=ON \
      -DLLVM_BUILD_TOOLS=OFF \
      -DSYCL_ENABLE_WERROR=OFF \
      -DCMAKE_INSTALL_PREFIX=${SYCL_DIR} \
      -DSYCL_INCLUDE_TESTS=OFF \
      -DLLVM_ENABLE_DOXYGEN=OFF \
      -DLLVM_ENABLE_SPHINX=OFF \
      -DBUILD_SHARED_LIBS=OFF \
      -DSYCL_ENABLE_XPTI_TRACING=ON \
      -DLLVM_ENABLE_LLD=OFF \
      -DXPTI_ENABLE_WERROR=OFF \
      -DSYCL_ENABLE_PLUGINS="opencl;cuda" \
      /scratch/llvm/llvm && \
    ninja -j8 deploy-sycl-toolchain && \
    ninja -j8 install && \
    cp bin/* ${SYCL_DIR}/bin && \
    echo "${SYCL_DIR}/lib" > /etc/ld.so.conf.d/sycl.conf && ldconfig && \
    rm -rf ${SCRATCH_DIR}
ENV PATH=${SYCL_DIR}/bin:$PATH
